[[plugins]]
repo = 'morhetz/gruvbox'

[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
  let g:airline_theme='gruvbox'
  let g:airline#extensions#tabline#enabled=1
  let g:airline_powerline_fonts=1
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <C-n> :NERDTreeToggle<CR>
  autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
  let g:NERDTreeShowBookmarks = 1
  let g:NERDTreeShowHidden = 1
  let g:NERDTreeChDirMode = 2
  let g:NERDTreeWinSize = 40
  let g:NERDTreeDirArrowExpandable = '▸'
  let g:NERDTreeDirArrowCollapsible = '▾'
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  map <leader>s <Plug>(easymotion-bd-f2)
  nmap <leader>s <Plug>(easymotion-overwin-f2)
  map <leader>l <Plug>(easymotion-bd-jk)
  nmap <leader>l <Plug>(easymotion-overwin-line)
'''

[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = '''
  let g:closetag_filenames = '*.html,*.jsp,*.xml,*.vue,*.php'
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = "release"
hook_add = '''
  set hidden
  set updatetime=300
  set shortmess+=c

  if has("nvim-0.5.0") || has("patch-8.1.1564")
    set signcolumn=number
  else
    set signcolumn=yes
  endif

  inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction

  autocmd CursorHold * silent call CocActionAsync('highlight')

  nmap <leader>rn <Plug>(coc-rename)

  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  nmap <leader>ac  <Plug>(coc-codeaction)
  nmap <leader>qf  <Plug>(coc-fix-current)

  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

  if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  endif

  nmap <silent> <C-s> <Plug>(coc-range-select)
  xmap <silent> <C-s> <Plug>(coc-range-select)

  command! -nargs=0 Format :call CocAction('format')
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)
  command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

  set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
'''

[[plugins]]
repo = 'prettier/vim-prettier'
build = 'npm install'

[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
  let g:startify_files_number = 5

  let g:startify_bookmarks = ["~/.config/nvim/init.vim", "~/.config/nvim/dein.toml", "~/.config/nvim/dein_lazy.toml"]
  let g:startify_change_to_dir = 1
  let g:startify_change_to_vcs_root = 1
  let g:startify_enable_special = 1
  let g:startify_update_oldfiles = 1
  let g:startify_session_autoload = 1
  let g:startify_session_before_save = ['echo "Saving this session ..."']
  let g:startify_session_delete_buffers = 0
  let g:startify_session_dir = '~/.vim/session'
  let g:startify_session_number = 20
  let g:startify_session_persistence = 1
  let g:startify_session_sort = 1
  let g:startify_lists = [
    \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
    \ { 'type': 'files',     'header': ['   MRU']            },
    \ { 'type': 'commands',  'header': ['   Commands']       },
      \ ]

  let g:startify_custom_header = [
      \ '     ░██████╗████████╗██████╗░███████╗██╗░░██╗░█████╗░███████╗░█████╗░░░░██╗░░░██╗██╗███╗░░░███╗',
      \ '     ██╔════╝╚══██╔══╝██╔══██╗██╔════╝██║░██╔╝██╔══██╗╚════██║██╔══██╗░░░██║░░░██║██║████╗░████║',
      \ '     ╚█████╗░░░░██║░░░██████╔╝█████╗░░█████═╝░██║░░██║░░███╔═╝███████║░░░╚██╗░██╔╝██║██╔████╔██║',
      \ '     ░╚═══██╗░░░██║░░░██╔══██╗██╔══╝░░██╔═██╗░██║░░██║██╔══╝░░██╔══██║░░░░╚████╔╝░██║██║╚██╔╝██║',
      \ '     ██████╔╝░░░██║░░░██║░░██║███████╗██║░╚██╗╚█████╔╝███████╗██║░░██║██╗░░╚██╔╝░░██║██║░╚═╝░██║',
      \ '     ╚═════╝░░░░╚═╝░░░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝░╚════╝░╚══════╝╚═╝░░╚═╝╚═╝░░░╚═╝░░░╚═╝╚═╝░░░░░╚═╝',
      \ ]
'''

